
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080007c  0080007c  00000270  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005b  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000425  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002de  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001bb  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000011f  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000012f  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  000015fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  8a:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_uart>:
#include <stdio.h>
#include "uart.h"

void init_uart(unsigned int baud)
{
    DDRD |= 0x02;
  92:	89 9a       	sbi	0x11, 1	; 17
    PORTD |= 0X03;
  94:	22 b3       	in	r18, 0x12	; 18
  96:	23 60       	ori	r18, 0x03	; 3
  98:	22 bb       	out	0x12, r18	; 18
    UBRRH = (unsigned char)(baud >> 8);
  9a:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baud;
  9c:	89 b9       	out	0x09, r24	; 9
    UCSRA = 0X00;
  9e:	1b b8       	out	0x0b, r1	; 11
    UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  a0:	88 e9       	ldi	r24, 0x98	; 152
  a2:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL)|(1 << UCSZ0)|(1<<UCSZ1);
  a4:	86 e8       	ldi	r24, 0x86	; 134
  a6:	80 bd       	out	0x20, r24	; 32
  a8:	08 95       	ret

000000aa <uart_putchar>:
}

int uart_putchar (char c, FILE * stream)
{
  aa:	cf 93       	push	r28
  ac:	c8 2f       	mov	r28, r24
    if (c == '\n')
  ae:	8a 30       	cpi	r24, 0x0A	; 10
  b0:	39 f0       	breq	.+14     	; 0xc0 <uart_putchar+0x16>
	uart_putchar ('\r', stream);
    loop_until_bit_is_set (UCSRA, UDRE);
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <uart_putchar+0x8>
    UDR = c;
  b6:	cc b9       	out	0x0c, r28	; 12
    return 0;
}
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	cf 91       	pop	r28
  be:	08 95       	ret
}

int uart_putchar (char c, FILE * stream)
{
    if (c == '\n')
	uart_putchar ('\r', stream);
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	0e 94 55 00 	call	0xaa	; 0xaa <uart_putchar>
  c6:	f5 cf       	rjmp	.-22     	; 0xb2 <uart_putchar+0x8>

000000c8 <__vector_11>:
    UDR = c;
    return 0;
}

ISR (USART_RXC_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
    unsigned char status;
    status = UCSRA;
  d4:	8b b1       	in	r24, 0x0b	; 11
    if ((status&((1<<DOR)|(1<<FE)|(1<<PE)))==0)
  d6:	8c 71       	andi	r24, 0x1C	; 28
  d8:	91 f0       	breq	.+36     	; 0xfe <__vector_11+0x36>
#include <stdio.h>
#include "uart.h"

void init_uart(unsigned int baud)
{
    DDRD |= 0x02;
  da:	89 9a       	sbi	0x11, 1	; 17
    PORTD |= 0X03;
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	83 60       	ori	r24, 0x03	; 3
  e0:	82 bb       	out	0x12, r24	; 18
    UBRRH = (unsigned char)(baud >> 8);
  e2:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) baud;
  e4:	89 e1       	ldi	r24, 0x19	; 25
  e6:	89 b9       	out	0x09, r24	; 9
    UCSRA = 0X00;
  e8:	1b b8       	out	0x0b, r1	; 11
    UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  ea:	88 e9       	ldi	r24, 0x98	; 152
  ec:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL)|(1 << UCSZ0)|(1<<UCSZ1);
  ee:	86 e8       	ldi	r24, 0x86	; 134
  f0:	80 bd       	out	0x20, r24	; 32
	uart_data = UDR;
	PORTC = 0XFF;
    }
    else
        init_uart (BAUD_SETTING);
}
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti
{
    unsigned char status;
    status = UCSRA;
    if ((status&((1<<DOR)|(1<<FE)|(1<<PE)))==0)
    {
	uart_data = UDR;
  fe:	8c b1       	in	r24, 0x0c	; 12
 100:	80 93 7c 00 	sts	0x007C, r24
	PORTC = 0XFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	85 bb       	out	0x15, r24	; 21
    }
    else
        init_uart (BAUD_SETTING);
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <main>:

static FILE mystdout = FDEV_SETUP_STREAM (uart_putchar, NULL, _FDEV_SETUP_WRITE);

int main(void)
{
    DDRC = 0xff;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 bb       	out	0x14, r24	; 20
    PORTC = 0X00;
 118:	15 ba       	out	0x15, r1	; 21
    init_uart (BAUD_SETTING);
 11a:	89 e1       	ldi	r24, 0x19	; 25
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 49 00 	call	0x92	; 0x92 <init_uart>
    sei ();
 122:	78 94       	sei
    stdout = &mystdout;
 124:	8d e6       	ldi	r24, 0x6D	; 109
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 80 00 	sts	0x0080, r25
 12c:	80 93 7f 00 	sts	0x007F, r24
 	    PORTC = 0x00;
	    printf ("%c", uart_data);
	    uart_data = '\0';
	}
	else 
	    PORTC = 0xff;
 130:	cf ef       	ldi	r28, 0xFF	; 255
    init_uart (BAUD_SETTING);
    sei ();
    stdout = &mystdout;
    while(1)
    {
	if (uart_data != '\0')
 132:	80 91 7c 00 	lds	r24, 0x007C
 136:	81 11       	cpse	r24, r1
 138:	05 c0       	rjmp	.+10     	; 0x144 <main+0x30>
 	    PORTC = 0x00;
	    printf ("%c", uart_data);
	    uart_data = '\0';
	}
	else 
	    PORTC = 0xff;
 13a:	c5 bb       	out	0x15, r28	; 21
    init_uart (BAUD_SETTING);
    sei ();
    stdout = &mystdout;
    while(1)
    {
	if (uart_data != '\0')
 13c:	80 91 7c 00 	lds	r24, 0x007C
 140:	88 23       	and	r24, r24
 142:	d9 f3       	breq	.-10     	; 0x13a <main+0x26>
	{
 	    PORTC = 0x00;
 144:	15 ba       	out	0x15, r1	; 21
	    printf ("%c", uart_data);
 146:	80 91 7c 00 	lds	r24, 0x007C
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 ab 00 	call	0x156	; 0x156 <putchar>
	    uart_data = '\0';
 150:	10 92 7c 00 	sts	0x007C, r1
 154:	ee cf       	rjmp	.-36     	; 0x132 <main+0x1e>

00000156 <putchar>:
 156:	60 91 7f 00 	lds	r22, 0x007F
 15a:	70 91 80 00 	lds	r23, 0x0080
 15e:	0e 94 b2 00 	call	0x164	; 0x164 <fputc>
 162:	08 95       	ret

00000164 <fputc>:
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	8c 01       	movw	r16, r24
 16e:	eb 01       	movw	r28, r22
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	81 fd       	sbrc	r24, 1
 174:	03 c0       	rjmp	.+6      	; 0x17c <fputc+0x18>
 176:	0f ef       	ldi	r16, 0xFF	; 255
 178:	1f ef       	ldi	r17, 0xFF	; 255
 17a:	1a c0       	rjmp	.+52     	; 0x1b0 <fputc+0x4c>
 17c:	82 ff       	sbrs	r24, 2
 17e:	0d c0       	rjmp	.+26     	; 0x19a <fputc+0x36>
 180:	2e 81       	ldd	r18, Y+6	; 0x06
 182:	3f 81       	ldd	r19, Y+7	; 0x07
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	9d 81       	ldd	r25, Y+5	; 0x05
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	64 f4       	brge	.+24     	; 0x1a6 <fputc+0x42>
 18e:	e8 81       	ld	r30, Y
 190:	f9 81       	ldd	r31, Y+1	; 0x01
 192:	01 93       	st	Z+, r16
 194:	f9 83       	std	Y+1, r31	; 0x01
 196:	e8 83       	st	Y, r30
 198:	06 c0       	rjmp	.+12     	; 0x1a6 <fputc+0x42>
 19a:	e8 85       	ldd	r30, Y+8	; 0x08
 19c:	f9 85       	ldd	r31, Y+9	; 0x09
 19e:	80 2f       	mov	r24, r16
 1a0:	09 95       	icall
 1a2:	89 2b       	or	r24, r25
 1a4:	41 f7       	brne	.-48     	; 0x176 <fputc+0x12>
 1a6:	8e 81       	ldd	r24, Y+6	; 0x06
 1a8:	9f 81       	ldd	r25, Y+7	; 0x07
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	9f 83       	std	Y+7, r25	; 0x07
 1ae:	8e 83       	std	Y+6, r24	; 0x06
 1b0:	c8 01       	movw	r24, r16
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
