Archive member included because of file (symbol)

/home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
                              /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o (exit)
/home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

point               0x2               main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
LOAD main.o
LOAD /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a
LOAD /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/libc.a
LOAD /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x7a2
 *(.vectors)
 .vectors       0x0000000000000000       0x34 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000034      0x4b5 main.o
                0x0000000000000034                Ascii_1
                0x00000000000004ea                . = ALIGN (0x2)
 *fill*         0x00000000000004e9        0x1 
                0x00000000000004ea                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000000000004ea        0x0 linker stubs
 *(.trampolines*)
                0x00000000000004ea                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000000000004ea                __ctors_start = .
 *(.ctors)
                0x00000000000004ea                __ctors_end = .
                0x00000000000004ea                __dtors_start = .
 *(.dtors)
                0x00000000000004ea                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000000000004ea        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
                0x00000000000004ea                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000000000004ea        0xc /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000000000004f6       0x16 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
                0x00000000000004f6                __do_copy_data
 .init4         0x000000000000050c       0x10 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
                0x000000000000050c                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000051c        0x4 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
 *(.init9)
 *(.text)
 .text          0x0000000000000520        0x2 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
                0x0000000000000520                __vector_22
                0x0000000000000520                __vector_1
                0x0000000000000520                __vector_24
                0x0000000000000520                __vector_12
                0x0000000000000520                __bad_interrupt
                0x0000000000000520                __vector_6
                0x0000000000000520                __vector_3
                0x0000000000000520                __vector_23
                0x0000000000000520                __vector_25
                0x0000000000000520                __vector_11
                0x0000000000000520                __vector_13
                0x0000000000000520                __vector_17
                0x0000000000000520                __vector_19
                0x0000000000000520                __vector_7
                0x0000000000000520                __vector_5
                0x0000000000000520                __vector_4
                0x0000000000000520                __vector_9
                0x0000000000000520                __vector_2
                0x0000000000000520                __vector_21
                0x0000000000000520                __vector_15
                0x0000000000000520                __vector_8
                0x0000000000000520                __vector_14
                0x0000000000000520                __vector_10
                0x0000000000000520                __vector_16
                0x0000000000000520                __vector_18
                0x0000000000000520                __vector_20
 .text          0x0000000000000522      0x26e main.o
                0x0000000000000522                switchline
                0x0000000000000560                oled_clear
                0x000000000000059a                oled_init
                0x00000000000006d8                OLED_Display
                0x000000000000075e                writestring
                0x000000000000077a                SPI_MasterInit
                0x0000000000000786                SPI_MasterTransmit
 .text          0x0000000000000790        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .text          0x0000000000000790        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .text          0x0000000000000790        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000790                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000000790        0xe main.o
                0x0000000000000790                main
 .text.libgcc.mul
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .text.libgcc.div
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc   0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
                0x000000000000079e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000000000000079e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
                0x000000000000079e                exit
                0x000000000000079e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000000000000079e        0x4 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000007a2                _etext = .

.data           0x0000000000800100       0x2e load address 0x00000000000007a2
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 .rodata.str1.1
                0x0000000000800100       0x2e main.o
 *(.gnu.linkonce.d*)
                0x000000000080012e                . = ALIGN (0x2)
                0x000000000080012e                _edata = .
                0x000000000080012e                PROVIDE (__data_end, .)

.bss            0x000000000080012e        0x2
                0x000000000080012e                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x000000000080012e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o
 .bss           0x000000000080012e        0x0 main.o
 .bss           0x000000000080012e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_exit.o)
 .bss           0x000000000080012e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_copy_data.o)
 .bss           0x000000000080012e        0x0 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x000000000080012e        0x2 main.o
                0x000000000080012e                point
                0x0000000000800130                PROVIDE (__bss_end, .)
                0x00000000000007a2                __data_load_start = LOADADDR (.data)
                0x00000000000007d0                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800130        0x0
                0x0000000000800130                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800130                PROVIDE (__noinit_end, .)
                0x0000000000800130                _end = .
                0x0000000000800130                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000      0x6cc
 *(.stab)
 .stab          0x0000000000000000      0x6cc /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o

.stabstr        0x0000000000000000       0x97
 *(.stabstr)
 .stabstr       0x0000000000000000       0x97 /home/moker/embed_learn/avr8-gnu-toolchain-linux_x86_64/bin/../lib/gcc/avr/4.7.2/../../../../avr/lib/avr4/crtm88.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x2f
 *(.comment)
 .comment       0x0000000000000000       0x2f main.o
                                         0x30 (size before relaxing)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges  0x0000000000000000       0x28
 *(.debug_aranges)
 .debug_aranges
                0x0000000000000000       0x28 main.o

.debug_pubnames
 *(.debug_pubnames)

.debug_info     0x0000000000000000      0x771
 *(.debug_info)
 .debug_info    0x0000000000000000      0x771 main.o
 *(.gnu.linkonce.wi.*)

.debug_abbrev   0x0000000000000000      0x29a
 *(.debug_abbrev)
 .debug_abbrev  0x0000000000000000      0x29a main.o

.debug_line     0x0000000000000000      0x1fd
 *(.debug_line)
 .debug_line    0x0000000000000000      0x1fd main.o

.debug_frame    0x0000000000000000       0xa8
 *(.debug_frame)
 .debug_frame   0x0000000000000000       0xa8 main.o

.debug_str      0x0000000000000000      0x17f
 *(.debug_str)
 .debug_str     0x0000000000000000      0x17f main.o
                                        0x1bd (size before relaxing)

.debug_loc      0x0000000000000000      0x1cf
 *(.debug_loc)
 .debug_loc     0x0000000000000000      0x1cf main.o

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges   0x0000000000000000       0x30
 *(.debug_ranges)
 .debug_ranges  0x0000000000000000       0x30 main.o

.debug_macro
 *(.debug_macro)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
